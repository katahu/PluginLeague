const fightContainer = document.querySelector("#divVisioFight");
const CRITICAL_HP_PERCENT = 20;
const CRITICAL_PP = 0;
const attackHandlers = {
  –†–µ–¥–∫–∏–µ: () => playSound(),
  –°–¥–∞—Ç—å—Å—è: () => surrender(),
  –õ–æ–≤–∏—Ç—å: () => captureMonster(),
  –°–º–µ–Ω–∏—Ç—å: () => changeMonster(),
  "–ê—Ç–∞–∫–∞ 1": () => useAttack(0),
  "–ê—Ç–∞–∫–∞ 2": () => useAttack(1),
  "–ê—Ç–∞–∫–∞ 3": () => useAttack(2),
  "–ê—Ç–∞–∫–∞ 4": () => useAttack(3),
  –ß–∞—Å—Ç—ã–µ: () => (levelingUP ? levelUpMonster() : useAttack()),
};
const delayFast = () => new Promise((resolve) => setTimeout(resolve, Math.floor(Math.random() * 1200) + 200));
const delayAttack = () => new Promise((resolve) => setTimeout(resolve, Math.floor(Math.random() * 200) + 200));
let nonePP = false;
let countMonster = 0;

let isActiveBot = false;
let observerVisubleEnemy = null;
let mainObserver = null;

// 
async function startBot() {
  if (isActiveBot) return;
  isActiveBot = true;

  await handleDeviceActions(true);
  const isFightVisible = () => fightContainer.style.display !== "none";
  const hasNoEnemy = () => !!document.querySelector("#divFightH .pokemonBoxDummy");

  if (isFightVisible()) {
    processBattleRules();
  }

  mainObserver = new MutationObserver(async function (mutations) {
    for (const mutation of mutations) {
      if (mutation.type === "attributes" && mutation.attributeName === "style") {
        if (isFightVisible()) {
          if (hasNoEnemy()) {
            // –ï—Å–ª–∏ –≤—Ä–∞–≥–∞ –ù–ï–¢
            await isVisubleEnemy();
            processBattleRules();
          } else {
            processBattleRules();
          }
        }else{
          checker()
        }
      }
    }
  });

  mainObserver.observe(fightContainer, {
    attributes: true,
    attributeFilter: ["style"],
  });

  async function isVisubleEnemy() {
    return new Promise((resolve) => {
      const divFightH = fightContainer.querySelector("#divFightH");

      if (observerVisubleEnemy) {
        observerVisubleEnemy.disconnect();
        observerVisubleEnemy = null;
      }

      observerVisubleEnemy = new MutationObserver(function (mutations) {
        for (const mutation of mutations) {
          if (mutation.type === "childList" && mutation.addedNodes.length > 0) {
            observerVisubleEnemy.disconnect();
            observerVisubleEnemy = null;
            resolve(true);
            break;
          }
        }
      });

      observerVisubleEnemy.observe(divFightH, {
        childList: true,
        attributes: true,
      });
    });
  }
}

function processBattleRules() {
  if (isMonsterLimit && countMonster >= countMonsterLimit) {
    return;
  }

  const monster = document.querySelector("#divFightH .name");

  if (monster.classList.length > 1) {
    playSound();
    return;
  }

  if (weatherLimit) {
    const weatherIcon = divVisioFight.querySelector("#divFightData #divFightWeather .iconweather");
    if (weatherIcon && variableWeather.split(",").some((w) => weatherIcon.classList.contains(w.trim()))) {
      playSound();
      return;
    }
  }

  const monsterName = monster?.textContent.trim();

  let actionFound = false;

  for (const [action, set] of Object.entries(controllerTable.setMap)) {
    if (set.has(monsterName)) {
      actionFound = true;

      if (action === "–°–¥–∞—Ç—å—Å—è") {
        const isAggressiveMonster = document.querySelector("#divFightData #divFightOptions .agro");
        if (levelingUP || isAggressiveMonster) {
          continue;
        }
      }

      if (action === "–õ–æ–≤–∏—Ç—å") {
        const canCapture = divVisioFight
          .querySelector("#divFightH .wildinfo .icon-ball")
          ?.classList.contains("greennumber");
        if (!canCapture) {
          continue;
        }
      }

      try {
        if (!attackHandlers[action]) {
          continue;
        }

        attackHandlers[action]();
        countMonster++;
        return;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è ${action}:`, error);
      }
    }
  }

  if (!actionFound) {
    playSound();
    return;
  }
}

async function useAttack(indexAttack, isFightLose) {
  if (await hasMy()) {
    if (isLoseMonster) {
      changeMonster(true);
    }
    return;
  }
  while (true) {
    if (!indexAttack) {
      indexAttack = variableAttack;
    }
    if (!indexAttack && isFightLose) {
      indexAttack = variableAttackAfter;
    }

    const attackResult = await findAttackIndex({ indexAttack });
    if (!attackResult) {
      return;
    }

    const { index, element } = attackResult;

    if (!(await canBattleContinue(attackResult.element))) {
      return;
    }

    await delayAttack();
    element.click();

    await isUpdateFight();

    if (await hasMy()) {
      if (isLoseMonster) {
        changeMonster(true);
      }

      return;
    }
    const updatedAttack = await getUpdatedAttackElement(index);
    if (!(await canBattleContinue(updatedAttack))) {
      if (isFightLose) {
        moveHeal();
      }
      return;
    }
    if (!hasEnemy()) {
      return;
    }
  }
}

async function levelUpMonster() {
  console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–∫–∞—á–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞");
  let isSwitch = false;
  while (true) {
    console.log("üîç –ò—â–µ–º –∞—Ç–∞–∫—É –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏: " + variableAttackUP);
    const attackResult = await findAttackIndex({ nameUpAttack: variableAttackUP });
    if (!attackResult) {
      console.log("‚ùå –ê—Ç–∞–∫–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏");
      return;
    }
    const { index, element } = attackResult;
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞—Ç–∞–∫–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º ${index}`);

    if (!(await canBattleContinue(attackResult.element))) {
      console.log("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–æ–π, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏");
      return;
    }

    await delayAttack();
    console.log("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –∞—Ç–∞–∫–µ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏");
    element.click();

    const divElements = document.querySelector(".divElements");
    console.log("‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Å—Ç—Ä–∞");
    await isAddElement(divElements);

    const monsterElement = divElements.querySelectorAll(".divElement");
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${monsterElement.length} –º–æ–Ω—Å—Ç—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞`);
    for (const monster of monsterElement) {
      const monsterName = monster.querySelector(".name")?.textContent.trim().toLowerCase();
      console.log(`üëÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω—Å—Ç—Ä–∞: ${monsterName}`);
      if (monsterName === nameUpMonster.toLowerCase()) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –º–æ–Ω—Å—Ç—Ä –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏: ${monsterName}`);
        await delayFast();
        let myHP = monster.querySelector(".progressbar.barHP div")?.style.width;
        myHP = parseFloat(myHP);
        console.log(`‚ù§Ô∏è HP –º–æ–Ω—Å—Ç—Ä–∞ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏: ${myHP}%`);
        if (myHP < CRITICAL_HP_PERCENT) {
          console.log(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ HP (${myHP}%), –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–∞—Ç—å—Å—è`);
          if (divVisioFight.querySelector("#divFightData #divFightOptions .agro")) {
            console.log("‚ùå –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏, –Ω–µ–ª—å–∑—è —Å–¥–∞—Ç—å—Å—è");
            return;
          }
          console.log("üè≥Ô∏è –°–¥–∞–µ–º—Å—è –∏ –∏–¥–µ–º –ª–µ—á–∏—Ç—å—Å—è");
          await surrender();
          moveHeal();
          return;
        }
        console.log("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ –º–æ–Ω—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏");
        monster.click();
        isSwitch = true;
        break;
      }
    }

    console.log("‚è≥ –û–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—è");
    await isUpdateFight();
    const updatedAttack = await getUpdatedAttackElement(index);
    console.log("‚úÖ –ë–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω");

    if (isSwitch && hasEnemy()) {
      console.log("üîÑ –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–º–µ–Ω–∞ –º–æ–Ω—Å—Ç—Ä–∞ –∏ –≤—Ä–∞–≥ —É–º–µ—Ä");
      const backupPP = +element.querySelector(".divMoveParams").textContent.split("/")[0];
      const backupElement = document.createElement("div");
      backupElement.innerHTML = `<div class="divMoveParams">${backupPP - 1}/1</div>`;
      const virtualObject = { element: backupElement };
      await canBattleContinue(virtualObject);
      return;
    }
    if (await canBattleContinue(updatedAttack)) {
      console.log("‚úÖ –ë–æ–π –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏");
      return;
    }
    if (await hasEnemy()) {
      console.log("üëæ –í—Ä–∞–≥ –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏");
      return;
    }
  }
}

async function findAttackIndex(option = {}) {
  // –ù–µ–≤—ã–∑—ã–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Ç–∞–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!!!
  const { indexAttack, nameUpAttack, nameSwitch } = option;
  const attackElements = divVisioFight.querySelectorAll("#divFightI .moves .divMoveTitle");

  let finalAttackIndex;

  if (nameUpAttack) {
    finalAttackIndex = Array.from(attackElements).findIndex((el) => el.textContent.trim() === nameUpAttack);
    if (finalAttackIndex === -1) {
      return null;
    }
  }

  if (nameSwitch) {
    finalAttackIndex = Array.from(attackElements).findIndex((el) => el.textContent.trim() === nameSwitch);
    if (finalAttackIndex === -1) {
      return null;
    }
  }

  if (indexAttack !== undefined) {
    finalAttackIndex = indexAttack;
  }


  if (finalAttackIndex === undefined) {
    return null;
  }

  if (nonePP) {
    const validAttacks = Array.from(attackElements)
      .map((el, i) => ({ el, index: i }))
      .filter(({ el, index }) => !el.classList.contains("category3") && index !== finalAttackIndex);

    if (validAttacks.length === 0) {
      return null;
    }

    finalAttackIndex = validAttacks[Math.floor(Math.random() * validAttacks.length)].index;
  }
  return {
    index: finalAttackIndex,
    element: attackElements[finalAttackIndex].parentElement,
  };
}
async function getUpdatedAttackElement(index) {
  const updateAttackElement = divVisioFight.querySelectorAll("#divFightI .moves .divMoveTitle");
  return {
    element: updateAttackElement[index].parentElement,
  };
}

async function changeMonster(isFightLose = false) {
  const ball = divVisioFight.querySelector("#divFightI .ball.clickable");
  const noneMyMonster = divVisioFight.querySelector("#divFightI .pokemonBoxDummy.clickable");
  await delayFast();
  if (isLoseMonster && noneMyMonster) {
    noneMyMonster.click();
  } else {
    ball.click();
  }
  const divElements = document.querySelector(".divElements");
  await isAddElement(divElements);
  const monsterElement = divElements.querySelectorAll(".divElement");
  let monsterFound = false;
  for (const monster of monsterElement) {
    const monsterName = monster.querySelector(".name")?.textContent.trim().toLowerCase();
    if (monsterName === nameSwitchMonster.toLowerCase()) {
      await delayAttack();
      monster.click();
      monsterFound = true;
      break;
    }
  }

  if (!monsterFound) {
    return;
  }

  await isUpdateFight();
  if (isFightLose) {
    useAttack(variableAttackAfter, true);
    return;
  }
  useAttack(variableAttackAfter);
}

async function canBattleContinue(elementAttack) {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–æ—è");
  const isActiveFight = divVisioFight.style.display !== "none";

  const attackElement = elementAttack.element ? elementAttack : { element: elementAttack };
  console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∞—Ç–∞–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");

  const isAgroLocation = divVisioFight.querySelector("#divFightData #divFightOptions .agro");
  console.log(`üåç –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è: ${isAgroLocation ? "–¥–∞" : "–Ω–µ—Ç"}`);

  let myHP = document.querySelector("#divFightI .progressbar.barHP div")?.style.width;

  if (!myHP) {
    console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ HP, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false");
    return false;
  }

  myHP = parseFloat(myHP);
  console.log(`‚ù§Ô∏è –¢–µ–∫—É—â–µ–µ HP: ${myHP}%`);

  if (myHP <= CRITICAL_HP_PERCENT) {
    console.log(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ HP (${myHP}% <= ${CRITICAL_HP_PERCENT}%)`);

    if (isAgroLocation) {
      console.log("üî¥ –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏");
      if (!isActiveFight) {
        console.log("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É–±–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–ª—è —Ö–∏–ª–∞");
        moveHeal();
        return false;
      }
      if (isLoseMonster) {
        console.log("üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å –º–æ–Ω—Å—Ç—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞");
        changeMonster(true);
        return false;
      }
      console.log("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è");
      playSound();
      return false;
    }

    if (isLoseMonster) {
      console.log("üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å –º–æ–Ω—Å—Ç—Ä–∞");
      changeMonster(true);
      return false;
    }

    console.log("üè≥Ô∏è –°–¥–∞–µ–º—Å—è –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ HP");
    surrender();

    await delayFast();
    console.log("üíä –ò–¥–µ–º –ª–µ—á–∏—Ç—å—Å—è");
    moveHeal();
    return false;
  }

  const currentPP = +attackElement.element.querySelector(".divMoveParams").textContent.split("/")[0];
  console.log(`üîã –¢–µ–∫—É—â–µ–µ PP –∞—Ç–∞–∫–∏: ${currentPP}`);

  if (currentPP <= CRITICAL_PP) {
    console.log(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ PP (${currentPP} <= ${CRITICAL_PP})`);

    if (isAgroLocation) {
      console.log("üî¥ –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ —Å –Ω–∏–∑–∫–∏–º PP");
      if (!isActiveFight) {
        console.log("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ —É–±–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–ª—è —Ö–∏–ª–∞");
        moveHeal();
        return false;
      }
      if (isLoseMonster) {
        console.log("üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å –º–æ–Ω—Å—Ç—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞");
        changeMonster(true);
        return false;
      }
     
      playSound()
      return false;
    }

    if (isLoseMonster) {
      console.log("üîÑ –ü—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å –º–æ–Ω—Å—Ç—Ä–∞ –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ PP");
      changeMonster(true);
      return false;
    }

    console.log("üè≥Ô∏è –°–¥–∞–µ–º—Å—è –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ PP");
    surrender();

    await delayFast();
    console.log("üíä –ò–¥–µ–º –ª–µ—á–∏—Ç—å—Å—è –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ PP");
    moveHeal();
    return false;
  }

  if (!isActiveFight) {
    console.log("‚ùå –ë–æ–π –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false");
    return false;
  }
  console.log("‚úÖ –ë–æ–π –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HP –∏ PP)");
  return true;
}

async function surrender() {
  let defeatButton = null;
  let closeButton = null;
  for (const button of document.querySelectorAll("#divFightButtons .button")) {
    if (button.textContent.includes("–°–¥–∞—Ç—å—Å—è")) {
      defeatButton = button;
    }
    if (button.textContent.includes("–ó–∞–∫—Ä—ã—Ç—å")) {
      closeButton = button;
      break;
    }
  }

  if (defeatButton.style.display !== "none") defeatButton.click();

  await new Promise((resolve) => {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.target === closeButton && mutation.attributeName === "style") {
          observer.disconnect();
          resolve();
        }
      });
    });
    observer.observe(closeButton, { attributes: true });
  });

  await delayFast();
  closeButton.click();
}
async function hasEnemy() {
  return !!fightContainer.querySelector("#divFightH .pokemonBoxDummy");
}
async function hasMy() {
  return !!fightContainer.querySelector("#divFightI .pokemonBoxDummy");
}
async function isAddElement(targetElement) {
  return new Promise((resolve) => {
    const observer = new MutationObserver((mutationsList) => {
      for (const mutation of mutationsList) {
        if (mutation.type === "childList" && mutation.addedNodes.length > 0) {
          observer.disconnect();
          resolve();
          return;
        }
      }
    });
    observer.observe(targetElement, { childList: true });
  });
}
async function isUpdateFight() {
  return new Promise((resolve) => {
    const divFightI = divVisioFight.querySelector("#divFightI");

    const observer = new MutationObserver((mutationsList) => {
      for (let mutation of mutationsList) {
        if (mutation.type === "childList" && mutation.addedNodes.length > 0) {
          observer.disconnect();
          resolve();
          return;
        }
      }
    });
    observer.observe(divFightI, { childList: true });
  });
}
function stopBot() {
  isActiveBot = false;
  if (mainObserver) {
    console.log("–û—Ç–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π");
    mainObserver.disconnect();
    mainObserver = null;
  }
  if (observerVisubleEnemy) {
    console.log("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞ –≤–≥–∞—Ä–æ–º");
    observerVisubleEnemy.disconnect();
    observerVisubleEnemy = null;
  }
}
async function observerElements(divElements) {
  return new Promise((resolve) => {
    const observer = new MutationObserver((mutationsList) => {
      for (const mutation of mutationsList) {
        if (mutation.type === "childList" && mutation.addedNodes.length > 0) {
          observer.disconnect();
          resolve();
        }
      }
    });
    observer.observe(divElements, { childList: true });
  });
}
